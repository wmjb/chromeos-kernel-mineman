# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/display/bridge/gpio-mux.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Generic display mux (1 input, 2 outputs)

maintainers:
  - Nicolas Boichat <drinkcat@chromium.org>

description: |
  This bindings describes a simple display (e.g. HDMI) mux, that has 1
  input, and 2 outputs. The mux status is controlled by hardware, and
  its status is read back using a GPIO.

properties:
  compatible:
    const: gpio-display-mux

  detect-gpios:
    maxItems: 1
    description: GPIO that indicates the active output

  ddc-i2c-bus:
    description: phandle link to the I2C controller used for DDC EDID probing
    $ref: /schemas/types.yaml#/definitions/phandle

  ports:
    $ref: /schemas/graph.yaml#/properties/ports

    properties:
      port@0:
        $ref: /schemas/graph.yaml#/properties/port
        description: |
          Video port for input.

      port@1:
        $ref: /schemas/graph.yaml#/properties/port
        description: |
          2 video ports for output.
          The reg value in the endpoints matches the GPIO status: when
          GPIO is asserted, endpoint with reg value <1> is selected.

    required:
      - port@0
      - port@1

required:
  - compatible
  - detect-gpios
  - ports

unevaluatedProperties: false

examples:
  - |
    #include <dt-bindings/gpio/gpio.h>
    hdmi_mux: hdmi_mux {
      compatible = "gpio-display-mux";
      detect-gpios = <&pio 36 GPIO_ACTIVE_HIGH>;
      pinctrl-names = "default";
      pinctrl-0 = <&hdmi_mux_pins>;
      ddc-i2c-bus = <&hdmiddc0>;

      ports {
        #address-cells = <1>;
        #size-cells = <0>;

        port@0 { /* input */
          reg = <0>;

          hdmi_mux_in: endpoint {
            remote-endpoint = <&hdmi0_out>;
          };
        };

        port@1 { /* output */
          reg = <1>;

          #address-cells = <1>;
          #size-cells = <0>;

          hdmi_mux_out_anx: endpoint@0 {
            reg = <0>;
            remote-endpoint = <&dp_bridge_in>;
          };

          hdmi_mux_out_hdmi: endpoint@1 {
            reg = <1>;
            remote-endpoint = <&hdmi_connector_in>;
          };
        };
      };
    };
